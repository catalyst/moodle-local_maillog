diff --git a/lib/moodlelib.php b/lib/moodlelib.php
index ea17ba05b2e..74f42aa22f8 100644
--- a/lib/moodlelib.php
+++ b/lib/moodlelib.php
@@ -6023,7 +6023,7 @@ function generate_email_messageid($localpart = null) {
  * @return bool Returns true if mail was sent OK and false if there was an error.
  */
 function email_to_user($user, $from, $subject, $messagetext, $messagehtml = '', $attachment = '', $attachname = '',
-                       $usetrueaddress = true, $replyto = '', $replytoname = '', $wordwrapwidth = 79, $attachment_list) {
+                       $usetrueaddress = true, $replyto = '', $replytoname = '', $wordwrapwidth = 79, $attachment_list, $queueapproved=false) {
 
     global $CFG, $PAGE, $SITE;
 
@@ -6068,6 +6068,7 @@ function email_to_user($user, $from, $subject, $messagetext, $messagehtml = '',
 
     if (!empty($user->deleted)) {
         debugging('Can not send email to deleted user: '.$user->id, DEBUG_DEVELOPER);
+        \local_maillog\helper::log_mail(false, 'User is deleted', $user, $from, $subject, $messagetext, $messagehtml, $attachment, $attachname, $usetrueaddress, $replyto, $replytoname, $wordwrapwidth, $attachment_list);
         return false;
     }
 
@@ -6079,6 +6080,7 @@ function email_to_user($user, $from, $subject, $messagetext, $messagehtml = '',
     if (!empty($CFG->noemailever)) {
         // Hidden setting for development sites, set in config.php if needed.
         debugging('Not sending email due to $CFG->noemailever config setting', DEBUG_NORMAL);
+        \local_maillog\helper::log_mail(false, 'noemailever config set', $user, $from, $subject, $messagetext, $messagehtml, $attachment, $attachname, $usetrueaddress, $replyto, $replytoname, $wordwrapwidth, $attachment_list);
         return true;
     }
 
@@ -6091,17 +6093,20 @@ function email_to_user($user, $from, $subject, $messagetext, $messagehtml = '',
     // Skip mail to suspended users.
     if ((isset($user->auth) && $user->auth=='nologin') or (isset($user->suspended) && $user->suspended)) {
         // Totara: this does not work properly without the hack above because devs keep forgetting to add these fields.
+        \local_maillog\helper::log_mail(false, 'Suspended user', $user, $from, $subject, $messagetext, $messagehtml, $attachment, $attachname, $usetrueaddress, $replyto, $replytoname, $wordwrapwidth, $attachment_list);
         return true;
     }
 
     if (!validate_email($user->email)) {
         // We can not send emails to invalid addresses - it might create security issue or confuse the mailer.
         debugging("email_to_user: User $user->id (".fullname($user).") email ($user->email) is invalid! Not sending.");
+        \local_maillog\helper::log_mail(false, 'Invalid email', $user, $from, $subject, $messagetext, $messagehtml, $attachment, $attachname, $usetrueaddress, $replyto, $replytoname, $wordwrapwidth, $attachment_list);
         return false;
     }
 
     if (over_bounce_threshold($user)) {
         debugging("email_to_user: User $user->id (".fullname($user).") is over bounce threshold! Not sending.");
+        \local_maillog\helper::log_mail(false, 'Over bounce threshold', $user, $from, $subject, $messagetext, $messagehtml, $attachment, $attachname, $usetrueaddress, $replyto, $replytoname, $wordwrapwidth, $attachment_list);
         return false;
     }
 
@@ -6109,9 +6114,16 @@ function email_to_user($user, $from, $subject, $messagetext, $messagehtml = '',
     // For More information, see {@link http://tools.ietf.org/html/rfc2606#section-2}.
     if (substr($user->email, -8) == '.invalid') {
         debugging("email_to_user: User $user->id (".fullname($user).") email domain ($user->email) is invalid! Not sending.");
+        \local_maillog\helper::log_mail(false, 'Invalid domain for email', $user, $from, $subject, $messagetext, $messagehtml, $attachment, $attachname, $usetrueaddress, $replyto, $replytoname, $wordwrapwidth, $attachment_list);
         return true; // This is not an error.
     }
 
+    if (get_config('local_maillog', 'queuemails') && !$queueapproved) {
+        // Queue email for sending later and return
+        \local_maillog\helper::log_mail(true, 'Email queued', $user, $from, $subject, $messagetext, $messagehtml, $attachment, $attachname, $usetrueaddress, $replyto, $replytoname, $wordwrapwidth, $attachment_list, LOCAL_MAILLOG_STATUS_QUEUED);
+        return true;
+    }
+
     // If the user is a remote mnet user, parse the email text for URL to the
     // wwwroot and modify the url to direct the user's browser to login at their
     // home site (identity provider - idp) before hitting the link itself.
@@ -6380,6 +6392,7 @@ function email_to_user($user, $from, $subject, $messagetext, $messagehtml = '',
         if (!empty($mail->SMTPDebug)) {
             echo '</pre>';
         }
+        \local_maillog\helper::log_mail(true, '', $user, $mail->From, $subject, $messagetext, $messagehtml, $attachment, $attachname, $usetrueaddress, $replyto, $replytoname, $wordwrapwidth, $attachment_list);
         return true;
     } else {
         // Trigger event for failing to send email.
@@ -6400,6 +6413,7 @@ function email_to_user($user, $from, $subject, $messagetext, $messagehtml = '',
         if (!empty($mail->SMTPDebug)) {
             echo '</pre>';
         }
+        \local_maillog\helper::log_mail(false, 'mail->Send() returned false', $user, $mail->From, $subject, $messagetext, $messagehtml, $attachment, $attachname, $usetrueaddress, $replyto, $replytoname, $wordwrapwidth, $attachment_list);
         return false;
     }
 }
